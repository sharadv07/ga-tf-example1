# Workflow- Automated process. Often referred to as a pipeline.
name: 'Terraform Deploy'

on:
  workflow_run:
    workflows: ['tf_scan']
    types: [completed]
  workflow_dispatch:
    inputs:
      TFAction:
        description: 'Terraform Action- Apply or Destroy'
        required: true
        default: 'apply'

permissions:
  contents: read

  #Job: A part of the workflow that consists of a sequence of tasks that are
  # executed on a runner
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      TerraformBackendStorageAccount: 'tfdemostgac'
      TerraformBackendResourceGroup: 'tf_demo_rg'
      TerraformBackendStorageContainer: 'tfdemoblob'

    defaults:
      # Make use of bashshell
      run:
        shell: bash

    steps:
      # Checkoutthe repository to the GitHub Action runner
      - name: Checkout
        uses: actions/checkout@v3

      # Set-up Infracost tool
      - name: Setup infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate infracost baseline in json format
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Install terraform on the runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize new/existing terraform working directory
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=storage_account_name=$TerraformBackendStorageAccount -backend-config=container_name=$TerraformBackendStorageContainer -backend-config=key=dev.tfstate -backend-config=resource_group_name=$TerraformBackendResourceGroup -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID" -backend-config=tenant_id="$ARM_TENANT_ID" -backend-config=client_id="$ARM_CLIENT_ID" -backend-config=client_secret="$ARM_CLIENT_SECRET"

      # Terraform fmt to check configuration files adherence to canonical format
      # - name: Terraform format
      #   id: fmt
      #   run: terraform fmt -check -recursive

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=TFplan.JSON
          terraform plan -out=plan.tfplan -input=false -var="location=eastus" -var="resource_group_name=tfdemo" -var="storage_account_name=tfdemoabcxxyg" -var="storage_account_tier=Standard" -var="virtual_network_name=myvnet"
        continue-on-error: true

      #Generate an Infracost diff and save to a JSON file
      - name: Generate Infra Cost
        run: |
          infracost diff --path=TFplan.JSON \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json

      # - name: Download infracost file
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: infracost.json

      - name: Terraform Apply
        id: apply
        if: ${{ inputs.TFAction == 'apply'}}
        run: terraform apply -input=false -auto-approve plan.tfplan

      - name: Terraform Destroy
        if: ${{ inputs.TFAction == 'destroy' }}
        run: terraform destroy -input=false -auto-approve
